/*
 * Copyright (c) 2021 the original author or authors.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

package science.aist.machinelearning.core;

import org.neo4j.ogm.annotation.Id;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import science.aist.machinelearning.core.fitness.Cachet;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;


/**
 * Describes a valid solution in the solution space corresponding to a given {@link Problem} in the problem space.
 *
 * @param <ST></ST> Solution Type
 * @param <PT></PT> Problem Type
 * @author Oliver Krauss
 * @since 1.0
 */
@NodeEntity
public class Solution<ST, PT> implements Serializable {

    /**
     * Quality of mapping
     */
    protected double quality;
    /**
     * list of qualities of single constraints
     */
    @Relationship(type = "QUALITY", direction = Relationship.OUTGOING)
    protected List<Cachet> cachets = new ArrayList<>();
    @Relationship(type = "GENE", direction = Relationship.OUTGOING)
    protected List<SolutionGene<ST, PT>> solutionGenes = new ArrayList<>();
    /**
     * Id generated by database
     */
    @Id
    private Long id;

    public Solution() {
    }

    public Solution(Solution<ST, PT> solution) {
        this.setQuality(solution.getQuality());
        this.setCachets(solution.getCachets());

        if (solution.getSolutionGenes() != null) {
            for (SolutionGene<ST, PT> gene : solution.getSolutionGenes()) {
                this.getSolutionGenes().add(new SolutionGene<>(gene.getGene(), gene.getProblemGenes()));
            }
        }
    }

    public void addGene(SolutionGene<ST, PT> solutionGene) {
        if (solutionGenes == null) {
            solutionGenes = new ArrayList<>();
        }
        solutionGenes.add(solutionGene);
    }

    public double getQuality() {
        return quality;
    }

    public void setQuality(double quality) {
        this.quality = quality;
    }

    public List<Cachet> getCachets() {
        return cachets;
    }

    public void setCachets(List<Cachet> cachets) {
        this.cachets = cachets;
    }

    public List<SolutionGene<ST, PT>> getSolutionGenes() {
        return solutionGenes;
    }

    public void setSolutionGenes(List<SolutionGene<ST, PT>> solutionGenes) {
        this.solutionGenes = solutionGenes;
    }

    /**
     * Transforms the problem to a human readable string for evaluation
     *
     * @return string representation of problem
     */
    public String toHumanReadableString() {

        StringBuilder text = new StringBuilder("[Solution, Genes = [");
        if (solutionGenes != null) {
            for (SolutionGene<ST, PT> solutionGene : solutionGenes) {
                text.append(solutionGene.toString()).append(",");
            }
        }
        text.append("]");

        return text.toString();
    }

    public Long getId() {
        return id;
    }

    @Override
    public String toString() {
        return toHumanReadableString();
    }

    public void adopt(Solution s) {
        this.id = s.id;
        this.quality = s.quality;
        this.cachets = s.cachets;
    }
}
