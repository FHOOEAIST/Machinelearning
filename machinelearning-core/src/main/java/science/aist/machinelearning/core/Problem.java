package science.aist.machinelearning.core;


import org.neo4j.ogm.annotation.Id;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 * Describes a machine learning problem that needs to be solved A problem consists of genes that are the minimal
 * building blocks of a problem.
 *
 * @param <PT> Problem Type of the Genomes
 * @author Oliver Krauss
 * @since 1.0
 */
@NodeEntity
public class Problem<PT> implements Serializable {

    /**
     * Id generated by database
     */
    @Id
    private Long id;
    @Relationship(type = "GENE", direction = Relationship.OUTGOING)
    private List<ProblemGene<PT>> problemGenes = new ArrayList<>();

    public Problem() {
    }

    public Problem(List<ProblemGene<PT>> problemGenes) {
        this.problemGenes = problemGenes;
    }

    /**
     * Returns the size of the machine learning problem as a human readable string (ex. "50 chromosome pairs", "20
     * machines, 10 contracts, 3 tasks")
     *
     * @return size of the machine learning problem
     */
    public String getProblemSize() {
        return problemGenes != null ? String.valueOf(problemGenes.size()) : "NULL";
    }

    /**
     * Transforms the problem to a human readable string for evaluation
     *
     * @return string representation of problem
     */
    public String toHumanReadableString() {
        StringBuilder text = new StringBuilder("[Problem, Genes = [");
        for (ProblemGene<PT> problemGene : problemGenes) {
            text.append(problemGene.toString()).append(",");
        }
        text.append("]");
        return text.toString();
    }


    public List<ProblemGene<PT>> getProblemGenes() {
        return problemGenes;
    }

    public void setProblemGenes(List<ProblemGene<PT>> problemGenes) {
        this.problemGenes = problemGenes;
    }

    public Long getId() {
        return id;
    }
}
