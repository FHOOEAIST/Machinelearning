package science.aist.machinelearning.core;

import org.neo4j.ogm.annotation.Id;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;

import java.util.ArrayList;
import java.util.List;

/**
 * Single gene that is usually part of a mapping. SolutionGene can be anything and heavily depends on the
 * implementation. A Solution gene has a 1:1, 1:N or N:1 mapping to a problem gene!
 *
 * @param <ST> Specific solution type
 * @param <PT> Problem type that this solution gene corresponds to
 * @author Daniel Wilfing
 * @since 1.0
 */
@NodeEntity
public class SolutionGene<ST, PT> extends Gene<ST> {


    /**
     * Id generated by database
     */
    @Id
    private Long id;

    /**
     * Human readable solution gene description.
     */
    private String description;

    @Relationship(type = "SOLVES", direction = Relationship.OUTGOING)
    private List<ProblemGene<PT>> problemGenes = new ArrayList<>();

    public SolutionGene() {
    }

    public SolutionGene(ST gene) {
        this.gene = gene;
    }

    public SolutionGene(ST gene, List<ProblemGene<PT>> problemGenes) {
        this.gene = gene;
        this.problemGenes = problemGenes;
        this.description = this.toString();
    }

    public void addProblemGene(ProblemGene<PT> problemGene) {
        if (problemGenes == null) {
            problemGenes = new ArrayList<>();
        }
        problemGenes.add(problemGene);
        this.description = this.toString();
    }

    public List<ProblemGene<PT>> getProblemGenes() {
        return problemGenes;
    }

    public void setProblemGenes(List<ProblemGene<PT>> problemGenes) {
        this.problemGenes = problemGenes;
        this.description = this.toString();
    }

    @Override
    public String toString() {

        StringBuilder text = new StringBuilder();
        if (gene != null) {
            text = new StringBuilder("[gene: " + gene + ", problems: [");
            if (problemGenes != null) {
                for (ProblemGene<PT> problemGene : problemGenes) {
                    text.append(problemGene.toString()).append(",");
                }
            }
            text.append("]");
        }
        return text.toString();
    }

    public Long getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }
}
