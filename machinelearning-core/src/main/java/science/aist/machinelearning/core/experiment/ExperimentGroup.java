/*
 * Copyright (c) 2021 the original author or authors.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

package science.aist.machinelearning.core.experiment;

import org.neo4j.ogm.annotation.Id;
import org.neo4j.ogm.annotation.NodeEntity;

import java.util.LinkedList;
import java.util.List;


/**
 * Class for conducting machinelearning experiments.
 * <p>
 * The Experiment Group is simply an aggregator for {@link Experiment}. It will run all given experiments and aggregate
 * the results into ONE ExperimentResult. The group does NOT run all permutations of all experiments.
 *
 * @param <ST></ST> Solution Type
 * @param <PT></PT> Problem Type
 * @author Oliver Krauss
 * @since 1.0
 */
@NodeEntity
public class ExperimentGroup<ST, PT> {

    /**
     * Id generated by database
     */
    @Id
    private Long id;


    private List<Experiment<ST, PT>> experiments = new LinkedList<>();

    public ExperimentGroup() {
    }

    public ExperimentGroup(List<Experiment<ST, PT>> experiments) {
        this.experiments = experiments;
    }

    /**
     * Runs all of the algorithms with the given problem genes
     *
     * @return result of all runs
     */
    public ExperimentResult<ST, PT> conductExperiment() {
        ExperimentResult<ST, PT> result = new ExperimentResult<>();

        experiments.forEach(x -> x.conductExperiment().getResults().forEach((key, value) -> {
            if (result.getResults().containsKey(key)) {
                result.getResults().get(key).addAll(value);
            } else {
                result.getResults().put(key, value);
            }
        }));

        return result;
    }

    public void setExperiments(List<Experiment<ST, PT>> experiments) {
        this.experiments = experiments;
    }

    public void addExperiment(Experiment<ST, PT> experiment) {
        this.experiments.add(experiment);
    }
}
